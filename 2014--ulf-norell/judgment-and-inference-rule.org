#+title: judgment and inference rule

* inference rules are formed about judgment

  - a type constructor is a parameterized judgment
    - note that
      a type constructor itself is not judgment
      the type constructed by it is judgment
    - note that
      the return type of type constructor is always type-tt

  - a type constructor's data constructors
    are its inference rules
    - more specifically
      the type of the data constructor is the inference rule
      the name of the data constructor is the name of the inference rule

  - [evident : judgment] == [data : type]

  - judgment == relation

  - inference rules can generate directed graph
    where judgment is node
    and inference is directed star [not only edge] in the graph

  - a proof is formed by an inference tree
    a function is a proof
    - more specifically
      the type of the function is the theorem to be proved
      the body of the function record the inference tree

  - both inference rule and theorem are
    expressed in the form of arrow

* judgment and predicate

  - a judgment reads like a predicate
    a predicate can be viewed as a set

  - a judgment can generate a predicate
    by searching its inference rules
    - the searching can be viewed as happening in
      the directed graph generated by inference rules

  - a judgment is like a predicate written in
    logic programming language

* meta judgment

  - in the above we used ':' such as :
    type constructor : inference rule
    proof : theorem
    function : type

  - note that
    ':' itself is a name of a judgment !
    - thus if we want to write a type checker
      we can model ':' as a judgment
      just like an interpreter is a program
